#!/usr/bin/env python

import struct
import sys
import json
import sys

from commandhandler import CommandHandler

sys.stderr = open('/tmp/goopg.err', 'a')


def send_message(message):
    """Helper function that sends a message to the webapp."""
    # Get a json string from the message
    message = json.dumps(message)
    # Write message size.
    sys.stdout.write(struct.pack('I', len(message)))
    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()


def read_message():
    """Helper that reads messages from the webapp."""
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    raw_text = sys.stdin.read(text_length).decode('utf-8')
    return json.loads(raw_text)


def main():
    """Thread that reads messages from the webapp."""
    #message_number = 0
    handler = CommandHandler()
    send_message({"command": "request_init"})
    queue_messages = []
    while 1:
        command = read_message()
        if not handler.initialized and command['command'] != 'init':
            queue_messages.append(command)
        else:
            def parse_and_send_result(c):
                result = handler.parse(c)
                if result is not None:
                    c['result'] = result
                    send_message(c)

            parse_and_send_result(command)
            if len(queue_messages) > 0:
                for c in queue_messages:
                    parse_and_send_result(c)
                queue_messages = []


if __name__ == '__main__':
    main()
    sys.exit(0)
