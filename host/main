#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
import gpg_wrapper
import json
import base64
from commands import getstatusoutput


def _call_nodejs(command, param):
    return getstatusoutput('''nodejs -e "console.log(%s('%s'));"''' %
                           (command, param))[1]


def escape(msg):
    return _call_nodejs('escape', msg)


def unescape(msg):
    return _call_nodejs('unescape', msg)


def decodeURIComponent(msg):
    return _call_nodejs('decodeURIComponent', msg)


def encodeURIComponent(msg):
    return _call_nodejs('encodeURIComponent', msg)


def utf8_to_b64(msg):
    return base64.b64encode(encodeURIComponent(escape(msg)))


def b64_to_utf8(msg):
    #return unescape(decodeURIComponent(window.atob(str)));
    return unescape(decodeURIComponent(base64.b64decode(msg)))


def send_message(message):
    """Helper function that sends a message to the webapp."""
     # Write message size.
    sys.stdout.write(struct.pack('I', len(message)))
    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()


def send_debug(message):
    send_message('{"debug": "%s"}' % message)


def read_thread_func():
    """Thread that reads messages from the webapp."""
    #message_number = 0
    while 1:
        # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.read(4)

        # Unpack message length as 4 byte integer.
        text_length = struct.unpack('i', text_length_bytes)[0]
        send_debug(text_length)

        # Read the text (JSON object) of the message.
        raw_text = sys.stdin.read(text_length).decode('utf-8')
        open('/tmp/raw', 'w').write(json.loads(raw_text))
        text = b64_to_utf8(json.loads(raw_text))
        open('/tmp/clean', 'w').write(text)

        # In headless mode just send an echo message back.
        send_message(gpg_wrapper.verify(text))
        # send_debug(text)


if __name__ == '__main__':
    read_thread_func()
    sys.exit(0)
